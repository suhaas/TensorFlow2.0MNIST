{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "mnist = tf.keras.datasets.mnist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "11493376/11490434 [==============================] - 1s 0us/step\n"
     ]
    }
   ],
   "source": [
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reshape and rescale data for the CNN\n",
    "\n",
    "train_images = train_images.reshape(60000, 28, 28, 1)\n",
    "\n",
    "test_images = test_images.reshape(10000, 28, 28, 1)\n",
    "\n",
    "train_images, test_images = train_images/255, test_images/255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\Suhaas\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\tensorflow\\python\\ops\\resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From C:\\Users\\Suhaas\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\core.py:143: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
     ]
    }
   ],
   "source": [
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n",
    "    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2,2),\n",
    "    tf.keras.layers.Dropout(0.25),\n",
    "    tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(128, activation='relu'),\n",
    "    tf.keras.layers.Dropout(0.5),\n",
    "    tf.keras.layers.Dense(10, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "tensor_board = tf.keras.callbacks.TensorBoard('./logs/LeNet-MNIST-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/15\n",
      "60000/60000 [==============================] - 23s 380us/sample - loss: 0.2397 - acc: 0.9276 - val_loss: 0.0515 - val_acc: 0.9825\n",
      "Epoch 2/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0866 - acc: 0.9741 - val_loss: 0.0422 - val_acc: 0.9862\n",
      "Epoch 3/15\n",
      "60000/60000 [==============================] - 13s 222us/sample - loss: 0.0657 - acc: 0.9807 - val_loss: 0.0339 - val_acc: 0.9887\n",
      "Epoch 4/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0541 - acc: 0.9839 - val_loss: 0.0316 - val_acc: 0.9898\n",
      "Epoch 5/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0445 - acc: 0.9862 - val_loss: 0.0320 - val_acc: 0.9894\n",
      "Epoch 6/15\n",
      "60000/60000 [==============================] - 13s 224us/sample - loss: 0.0389 - acc: 0.9875 - val_loss: 0.0325 - val_acc: 0.9898\n",
      "Epoch 7/15\n",
      "60000/60000 [==============================] - 13s 222us/sample - loss: 0.0355 - acc: 0.9884 - val_loss: 0.0306 - val_acc: 0.9910\n",
      "Epoch 8/15\n",
      "60000/60000 [==============================] - 13s 222us/sample - loss: 0.0301 - acc: 0.9904 - val_loss: 0.0284 - val_acc: 0.9913\n",
      "Epoch 9/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0292 - acc: 0.9908 - val_loss: 0.0291 - val_acc: 0.9905\n",
      "Epoch 10/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0256 - acc: 0.9918 - val_loss: 0.0275 - val_acc: 0.9920\n",
      "Epoch 11/15\n",
      "60000/60000 [==============================] - 13s 221us/sample - loss: 0.0248 - acc: 0.9920 - val_loss: 0.0278 - val_acc: 0.9914\n",
      "Epoch 12/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0231 - acc: 0.9923 - val_loss: 0.0291 - val_acc: 0.9923\n",
      "Epoch 13/15\n",
      "60000/60000 [==============================] - 13s 222us/sample - loss: 0.0207 - acc: 0.9930 - val_loss: 0.0266 - val_acc: 0.9930\n",
      "Epoch 14/15\n",
      "60000/60000 [==============================] - 13s 224us/sample - loss: 0.0190 - acc: 0.9938 - val_loss: 0.0322 - val_acc: 0.9923\n",
      "Epoch 15/15\n",
      "60000/60000 [==============================] - 13s 223us/sample - loss: 0.0186 - acc: 0.9938 - val_loss: 0.0304 - val_acc: 0.9929\n",
      "Training took 223.41960072517395 seconds\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "start_time=time.time()\n",
    "\n",
    "model.fit(train_images, train_labels, batch_size=128, epochs=15, verbose=1,\n",
    "         validation_data=(test_images, test_labels), callbacks=[tensor_board])\n",
    "\n",
    "print('Training took {} seconds'.format(time.time()-start_time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "TensorFlow-GPU-1.13",
   "language": "python",
   "name": "tf-gpu"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
